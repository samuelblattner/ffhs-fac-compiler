package ch.samuelblattner.ffhs.fac.emotica.parsing;

import java_cup.runtime.*;
import ch.samuelblattner.ffhs.fac.emotica.interpreter.instructions.*;
import ch.samuelblattner.ffhs.fac.emotica.interpreter.enums.MathOperator;

import java.util.ArrayList;


/* Preliminaries to set up and use the scanner.  */
/*init with {: scanner.init();              :};
scan with {: return scanner.next_token(); :};*/

terminal            String STRING_LITERAL, VARIABLE;
terminal            String NUMBER;

terminal            RARROW, RDARROW, LRARROW, RDARROWSTOP, RHAND, HALTHAND, SEMICOLON;
terminal            QMARK, ASTERISK, PLUS, MINUS, DIV, HAT, PERCENT, EMPTY, CYCLE, BOX_IN, BOX_OUT;
terminal            EMJ_SMILE, EMJ_SAD, FLASH, SPIN, GT, GTE, LT, LTE, EE, NE, COMMA, SPEAKER;

non terminal        ArrayList<AbstractInstruction> valuelist;
non terminal        AbstractInstruction instruction, assignment, value, operation, functioncall, builtin, function, loop;
non terminal        RangeInstruction range;
non terminal        MathOperator operator;
non terminal        ScriptInstruction block;
non terminal        conditional, condition, comparison, comparator;

precedence left SEMICOLON, PERCENT, DIV, HAT, MINUS, PLUS, ASTERISK, COMMA;

start with instruction;

/* Productions */
instruction     ::= instruction:i SEMICOLON instruction:il {: RESULT = new ScriptInstruction(i, il); :}
                    | instruction:i SEMICOLON {: RESULT = new ScriptInstruction(i, null); :}
                    | function:fn {: RESULT = fn; :} instruction: i {: RESULT = new ScriptInstruction(fn, i); :}
                    | function:fn {: RESULT = fn; :}
                    | conditional
                    | assignment:a {: RESULT = a; :}
                    | loop: l {: RESULT = l; :}
                    | functioncall:fc {: RESULT = fc; :}
                    | builtin:blt {: RESULT = blt; :};

assignment      ::= value:val RARROW VARIABLE:varName {: RESULT = new AssignmentInstruction(val, varName); :};
conditional     ::= QMARK condition EMJ_SMILE block
                    | QMARK condition EMJ_SMILE block EMJ_SAD block;

function        ::= FLASH VARIABLE:fnName BOX_OUT valuelist:args block:b {: RESULT = new FunctionDefinitionInstruction(fnName, args, b); :};

loop            ::= CYCLE condition block
                    | CYCLE VARIABLE:c range:r block:b {: RESULT = new LoopInstruction(c, r, b); :};

functioncall    ::= SPIN VARIABLE:varName BOX_IN valuelist:input {: RESULT = new FunctionCallInstruction(varName, input); :};

value           ::= VARIABLE:var {: RESULT = new GetVariableInstruction(var); :} |
                    STRING_LITERAL:s {: RESULT = new StringLiteralInstruction(s); :} |
                    NUMBER:n {: RESULT = new NumberLiteralInstruction(n); :} |
                    operation:o {: RESULT = o; :} |
                    functioncall:fn {: RESULT = fn; :};

condition       ::= comparison | operation;
range           ::= LRARROW value:s RDARROW value:e {: RESULT = new RangeInstruction(s, e, false); :}
                    | LRARROW value:s RDARROWSTOP value:e {: RESULT = new RangeInstruction(s, e, true); :};

block           ::= RHAND instruction:i HALTHAND {: RESULT = new ScriptInstruction(i, null); :};

valuelist       ::= EMPTY
                    | {: RESULT = new ArrayList<AbstractInstruction>(); :}
                    | value:v {: RESULT = new ArrayList<AbstractInstruction>(); RESULT.add(v); :}
                    | value:v COMMA valuelist:vl {: vl.add(v); RESULT = vl; :};

comparison      ::= value comparator value;
operator        ::= PLUS {: RESULT = MathOperator.ADD; :}
                    | MINUS {: RESULT = MathOperator.ADD; :}
                    | ASTERISK  {: RESULT = MathOperator.MUL; :}
                    | DIV  {: RESULT = MathOperator.DIV; :}
                    | HAT  {: RESULT = MathOperator.POW; :}
                    | PERCENT  {: RESULT = MathOperator.MOD; :};

comparator      ::= GT | GTE | LT | LTE | EE | NE;
operation       ::= value:vl operator:op value:vr {: RESULT = new MathOperationInstruction(vl, op, vr); :};

builtin        ::= SPEAKER value:v {: RESULT = new ConsoleOutputInstruction(v); :};
