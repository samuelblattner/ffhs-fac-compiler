
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\003\005\000\002\004\006\000\002" +
    "\004\010\000\002\005\007\000\002\006\005\000\002\006" +
    "\006\000\002\007\006\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\006\000\002" +
    "\012\006\000\002\013\005\000\002\013\006\000\002\014" +
    "\003\000\002\014\003\000\002\014\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\005\000\002\021\005\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\017\005\000" +
    "\002\016\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\022\004\016\020\020\021\013\022\007\032" +
    "\005\037\010\040\024\050\014\001\002\000\006\002\124" +
    "\017\050\001\002\000\012\004\016\020\112\021\013\040" +
    "\024\001\002\000\010\002\ufffb\014\ufffb\017\ufffb\001\002" +
    "\000\012\004\016\020\020\021\013\040\024\001\002\000" +
    "\004\020\054\001\002\000\026\002\ufff9\007\uffec\014\ufff9" +
    "\017\ufff9\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\001\002\000\030\002\ufffd\004\016\014\ufffd\017\ufffd" +
    "\020\020\021\013\022\007\032\005\037\010\040\024\050" +
    "\014\001\002\000\050\002\uffee\007\uffee\013\uffee\014\uffee" +
    "\017\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\035\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\046\uffee\047\uffee\001\002\000\012\004\016\020\020\021" +
    "\013\040\024\001\002\000\050\002\uffed\007\uffed\013\uffed" +
    "\014\uffed\017\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\035\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\001\002\000\050\002\uffef\007" +
    "\uffef\013\uffef\014\uffef\017\uffef\023\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\035\uffef\041\uffef\042\uffef\043" +
    "\uffef\044\uffef\045\uffef\046\uffef\047\uffef\001\002\000\030" +
    "\002\ufffc\004\016\014\ufffc\017\ufffc\020\020\021\013\022" +
    "\007\032\005\037\010\040\024\050\014\001\002\000\050" +
    "\002\ufff0\007\ufff0\013\ufff0\014\ufff0\017\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\035\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\001" +
    "\002\000\010\002\ufffa\014\ufffa\017\ufffa\001\002\000\010" +
    "\002\ufff8\014\ufff8\017\ufff8\001\002\000\020\007\045\023" +
    "\040\024\036\025\037\026\041\027\042\030\035\001\002" +
    "\000\004\020\025\001\002\000\004\033\026\001\002\000" +
    "\014\004\016\020\020\021\013\031\027\040\024\001\002" +
    "\000\050\002\uffe2\007\uffe2\013\uffe2\014\uffe2\017\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\035\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\001\002\000\050\002\uffec\007\uffec\013\uffec\014\uffec" +
    "\017\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\035\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec" +
    "\046\uffec\047\uffec\001\002\000\050\002\uffe1\007\uffe1\013" +
    "\uffe1\014\uffe1\017\uffe1\023\040\024\036\025\037\026\041" +
    "\027\042\030\035\035\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\033\001\002\000\050\002\ufff1" +
    "\007\ufff1\013\ufff1\014\ufff1\017\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\035\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\001\002\000" +
    "\014\004\016\020\020\021\013\031\027\040\024\001\002" +
    "\000\012\004\016\020\020\021\013\040\024\001\002\000" +
    "\012\004\uffd9\020\uffd9\021\uffd9\040\uffd9\001\002\000\012" +
    "\004\uffde\020\uffde\021\uffde\040\uffde\001\002\000\012\004" +
    "\uffdd\020\uffdd\021\uffdd\040\uffdd\001\002\000\012\004\uffdc" +
    "\020\uffdc\021\uffdc\040\uffdc\001\002\000\012\004\uffdb\020" +
    "\uffdb\021\uffdb\040\uffdb\001\002\000\012\004\uffda\020\uffda" +
    "\021\uffda\040\uffda\001\002\000\050\002\uffd2\007\uffd2\013" +
    "\uffd2\014\uffd2\017\uffd2\023\040\024\036\025\037\026\041" +
    "\027\042\030\035\035\uffd2\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\001\002\000\050\002\uffe0" +
    "\007\uffe0\013\uffe0\014\uffe0\017\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\035\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\001\002\000" +
    "\004\020\046\001\002\000\010\002\ufff7\014\ufff7\017\ufff7" +
    "\001\002\000\010\002\ufffe\014\ufffe\017\050\001\002\000" +
    "\022\004\016\020\020\021\013\022\007\032\005\037\010" +
    "\040\024\050\014\001\002\000\010\002\001\014\001\017" +
    "\001\001\002\000\024\002\uffd1\014\uffd1\017\uffd1\023\040" +
    "\024\036\025\037\026\041\027\042\030\035\001\002\000" +
    "\010\002\uffff\014\uffff\017\050\001\002\000\004\034\055" +
    "\001\002\000\006\020\060\031\057\001\002\000\004\013" +
    "\063\001\002\000\004\013\uffe5\001\002\000\006\013\uffe4" +
    "\047\061\001\002\000\006\020\060\031\057\001\002\000" +
    "\004\013\uffe3\001\002\000\022\004\016\020\020\021\013" +
    "\022\007\032\005\037\010\040\024\050\014\001\002\000" +
    "\030\002\ufff4\004\ufff4\014\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\032\ufff4\037\ufff4\040\ufff4\050\ufff4\001\002\000" +
    "\006\014\067\017\066\001\002\000\024\004\016\014\070" +
    "\020\020\021\013\022\007\032\005\037\010\040\024\050" +
    "\014\001\002\000\032\002\uffe7\004\uffe7\014\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\032\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\050\uffe7\001\002\000\032\002\uffe6\004\uffe6\014\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\032\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\050\uffe6\001\002\000\004\035\105\001\002" +
    "\000\036\013\uffea\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\035\uffea\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\001\002\000\032\023\040\024\036\025" +
    "\037\026\041\027\042\030\035\041\100\042\076\043\102" +
    "\044\077\045\103\046\101\001\002\000\006\013\uffeb\035" +
    "\uffeb\001\002\000\012\004\016\020\020\021\013\040\024" +
    "\001\002\000\012\004\uffd7\020\uffd7\021\uffd7\040\uffd7\001" +
    "\002\000\012\004\uffd5\020\uffd5\021\uffd5\040\uffd5\001\002" +
    "\000\012\004\uffd8\020\uffd8\021\uffd8\040\uffd8\001\002\000" +
    "\012\004\uffd3\020\uffd3\021\uffd3\040\uffd3\001\002\000\012" +
    "\004\uffd6\020\uffd6\021\uffd6\040\uffd6\001\002\000\012\004" +
    "\uffd4\020\uffd4\021\uffd4\040\uffd4\001\002\000\022\013\uffdf" +
    "\023\040\024\036\025\037\026\041\027\042\030\035\035" +
    "\uffdf\001\002\000\004\013\063\001\002\000\032\002\ufff6" +
    "\004\ufff6\014\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\032" +
    "\ufff6\036\107\037\ufff6\040\ufff6\050\ufff6\001\002\000\004" +
    "\013\063\001\002\000\030\002\ufff5\004\ufff5\014\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\032\ufff5\037\ufff5\040\ufff5" +
    "\050\ufff5\001\002\000\004\013\063\001\002\000\034\011" +
    "\114\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\001" +
    "\002\000\004\013\063\001\002\000\004\021\115\001\002" +
    "\000\006\010\117\012\116\001\002\000\004\021\121\001" +
    "\002\000\004\021\120\001\002\000\004\013\uffe9\001\002" +
    "\000\004\013\uffe8\001\002\000\010\002\ufff2\014\ufff2\017" +
    "\ufff2\001\002\000\010\002\ufff3\014\ufff3\017\ufff3\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\024\002\003\003\005\004\011\005\016\006" +
    "\020\007\010\010\022\016\021\017\014\001\001\000\002" +
    "\001\001\000\014\007\027\010\072\011\110\017\071\021" +
    "\073\001\001\000\002\001\001\000\014\007\027\010\072" +
    "\011\070\017\071\021\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\052\003\005\004\011\005\016" +
    "\006\020\007\010\010\022\016\021\017\014\001\001\000" +
    "\002\001\001\000\010\007\027\010\051\017\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\002\046\003" +
    "\005\004\011\005\016\006\020\007\010\010\022\016\021" +
    "\017\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\027\010\030\015\031\017" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\033\001\001\000\002\001\001\000\012\007\027\010" +
    "\030\015\043\017\014\001\001\000\010\007\027\010\042" +
    "\017\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\050\003\005\004\011\005\016\006\020\007\010\010" +
    "\022\016\021\017\014\001\001\000\002\001\001\000\004" +
    "\020\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\055\001\001\000\004\013\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\061\001\001\000" +
    "\002\001\001\000\024\002\064\003\005\004\011\005\016" +
    "\006\020\007\010\010\022\016\021\017\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\050\003\005" +
    "\004\011\005\016\006\020\007\010\010\022\016\021\017" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\033\022\074\001" +
    "\001\000\002\001\001\000\010\007\027\010\103\017\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\033\001\001\000\004\013\105\001\001\000" +
    "\002\001\001\000\004\013\107\001\001\000\002\001\001" +
    "\000\004\013\122\001\001\000\004\012\112\001\001\000" +
    "\004\013\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // instruction ::= instruction SEMICOLON instruction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= instruction EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruction ::= conditional instruction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= function instruction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= conditional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= functioncall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= builtin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // assignment ::= value RARROW VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // conditional ::= QMARK condition EMJ_SMILE block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // conditional ::= QMARK condition EMJ_SMILE block EMJ_SAD block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= FLASH VARIABLE BOX_OUT varlist block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // loop ::= CYCLE condition block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // loop ::= CYCLE VARIABLE range block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functioncall ::= SPIN VARIABLE BOX_IN valuelist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functioncall",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // value ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // value ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // value ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // value ::= operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // value ::= functioncall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condition ::= comparison 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condition ::= operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // range ::= LRARROW NUMBER RDARROW NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("range",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // range ::= LRARROW NUMBER RDARROWSTOP NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("range",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // block ::= RHAND instruction HALTHAND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // block ::= RHAND instruction SEMICOLON HALTHAND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // varlist ::= EMPTY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varlist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // varlist ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varlist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // varlist ::= VARIABLE COMMA varlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varlist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valuelist ::= EMPTY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valuelist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valuelist ::= value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valuelist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valuelist ::= value COMMA valuelist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valuelist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparison ::= value comparator value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operator ::= ASTERISK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operator ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operator ::= HAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operator ::= PERCENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparator ::= GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparator",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparator ::= GTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparator",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparator ::= LT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparator",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparator ::= LTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparator",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparator ::= EE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparator",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparator ::= NE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparator",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operation ::= value operator value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // builtin ::= SPEAKER value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("builtin",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
